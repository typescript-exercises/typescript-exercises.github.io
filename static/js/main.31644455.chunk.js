(this.webpackJsonpinteractive=this.webpackJsonpinteractive||[]).push([[1],{262:function(n,e,t){n.exports=t(389)},347:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    We are starting a small community of users. For performance\n    reasons we have decided to store all users right in the code.\n    This way we can provide our developers with more\n    user-interaction opportunities. With user-related data, at least.\n    All the GDPR-related issues we will solved some other day.\n    This would be the base for our future experiments during\n    these exercises.\n\nExercise:\n\n    Given the data, define the interface \"User\" and use it accordingly.\n\n*/\n\nexport type User = unknown;\n\nexport const users: unknown[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    }\n];\n\nexport function logPerson(user: unknown) {\n    console.log(` - ${user.name}, ${user.age}`);\n}\n\nconsole.log('Users:');\nusers.forEach(logPerson);\n\n\n/* In case if you are stuck:\n\n// https://www.typescriptlang.org/docs/handbook/interfaces.html#introduction\n*/\n"},348:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {User, logPerson, users} from './index';\n\ntypeAssert<IsTypeEqual<User, {name: string, age: number, occupation: string}>>();\ntypeAssert<IsTypeEqual<typeof users, {name: string, age: number, occupation: string}[]>>();\ntypeAssert<IsTypeEqual<typeof logPerson, (user: {name: string, age: number, occupation: string}) => void>>();\n"},349:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    All 2 users liked the idea of the community. We should go\n    forward and introduce some order. We are in Germany after all.\n    Let's add a couple of admins.\n\n    Initially we only had users in the in-memory database. After\n    introducing Admins, we need to fix the types so that\n    everything works well together.\n\nExercise:\n\n    Type \"Person\" is missing, please define it and use\n    it in persons array and logPerson function in order to fix\n    all the TS errors.\n\n*/\n\ninterface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = unknown;\n\nexport const persons: User[] /* <- Person[] */ = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(user: User) {\n    console.log(` - ${user.name}, ${user.age}`);\n}\n\npersons.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\n"},350:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {Person, logPerson, persons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({occupation: string} | {role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},351:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Since we already have some of the additional\n    information about our users, it's a good idea\n    to output it in a nice way.\n\nExercise:\n\n    Fix type errors in logPerson function.\n\n    logPerson function should accept both User and Admin\n    and should output relevant information according to\n    the input: occupation for User and role for Admin.\n\n*/\n\ninterface User {\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    {\n        name: 'Max Mustermann',\n        age: 25,\n        occupation: 'Chimney sweep'\n    },\n    {\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    }\n];\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string;\n    if (person.role) {\n        additionalInformation = person.role;\n    } else {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\npersons.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-the-in-operator\n"},352:function(n,e,t){"use strict";t.r(e),e.default="import {FirstArgument, IsTypeEqual, typeAssert} from 'type-assertions';\nimport {logPerson, Person, persons} from './index';\n\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({occupation: string} | {role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({occupation: string} | {role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},353:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    As we introduced \"type\" to both User and Admin\n    it's now easier to distinguish between them.\n    Once object type checking logic was extracted\n    into separate functions isUser and isAdmin -\n    logPerson function got new type errors.\n\nExercise:\n\n    Figure out how to help TypeScript understand types in\n    this situation and apply necessary fixes.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nexport function isAdmin(person: Person) {\n    return person.type === 'admin';\n}\n\nexport function isUser(person: Person) {\n    return person.type === 'user';\n}\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nconsole.log('Admins:');\npersons.filter(isAdmin).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Users:');\npersons.filter(isUser).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates\n"},354:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {logPerson, isUser, isAdmin, Person, persons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isUser>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isUser>,\n        boolean\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isAdmin>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isAdmin>,\n        boolean\n    >\n>();\n"},355:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Time to filter the data! In order to be flexible\n    we filter users using a number of criteria and\n    return only those matching all of the criteria.\n    We don't need Admins yet, we only filter Users.\n\nExercise:\n\n    Without duplicating type structures, modify\n    filterUsers function definition so that we can\n    pass only those criteria which are needed,\n    and not the whole User information as it is\n    required now according to typing.\n\nHigher difficulty bonus exercise:\n\n    Exclude \"type\" from filter criterias.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    {\n        type: 'admin',\n        name: 'Jane Doe',\n        age: 32,\n        role: 'Administrator'\n    },\n    {\n        type: 'user',\n        name: 'Kate M\xfcller',\n        age: 23,\n        occupation: 'Astronaut'\n    },\n    {\n        type: 'admin',\n        name: 'Bruce Willis',\n        age: 64,\n        role: 'World saver'\n    },\n    {\n        type: 'user',\n        name: 'Wilson',\n        age: 23,\n        occupation: 'Ball'\n    },\n    {\n        type: 'admin',\n        name: 'Agent Smith',\n        age: 23,\n        role: 'Administrator'\n    }\n];\n\nexport const isAdmin = (person: Person): person is Admin => person.type === 'admin';\nexport const isUser = (person: Person): person is User => person.type === 'user';\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    console.log(` - ${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nexport function filterUsers(persons: Person[], criteria: User): User[] {\n    return persons.filter(isUser).filter((user) => {\n        let criteriaKeys = Object.keys(criteria) as (keyof User)[];\n        return criteriaKeys.every((fieldName) => {\n            return user[fieldName] === criteria[fieldName];\n        });\n    });\n}\n\nconsole.log('Users of age 23:');\n\nfilterUsers(\n    persons,\n    {\n        age: 23\n    }\n).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#predefined-conditional-types\n"},356:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, IsTypeAssignable, Not, FirstArgument, SecondArgument, typeAssert} from 'type-assertions';\nimport {logPerson, isUser, isAdmin, Person, persons, filterUsers} from './index';\n\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {name: string}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {age: number}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {name: string; age: number}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {occupation: string}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        SecondArgument<typeof filterUsers>,\n        {name: string; age: number; occupation: string}\n    >\n>();\ntypeAssert<\n    Not<\n        IsTypeAssignable<\n            SecondArgument<typeof filterUsers>,\n            {hello: 'world'}\n        >\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof filterUsers>,\n        {type: 'user'; name: string; age: number; occupation: string}[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isUser>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isUser>,\n        boolean\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof isAdmin>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof isAdmin>,\n        boolean\n    >\n>();\n"},357:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Filtering requirements have grown. We need to be\n    able to filter any kind of Persons.\n\nExercise:\n\n    Fix typing for the filterPersons so that it can filter users\n    and return User[] when personType='user' and return Admin[]\n    when personType='admin'. Also filterPersons should accept\n    partial User/Admin type according to the personType.\n    `criteria` argument should behave according to the\n    `personType` argument value. `type` field is not allowed in\n    the `criteria` field.\n\nHigher difficulty bonus exercise:\n\n    Implement a function `getObjectKeys()` which returns more\n    convenient result for any argument given, so that you don't\n    need to cast it.\n\n    let criteriaKeys = Object.keys(criteria) as (keyof User)[];\n    --\x3e\n    let criteriaKeys = getObjectKeys(criteria);\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nexport type Person = User | Admin;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'user', name: 'Wilson', age: 23, occupation: 'Ball' },\n    { type: 'admin', name: 'Agent Smith', age: 23, role: 'Anti-virus engineer' }\n];\n\nexport function logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nexport function filterPersons(persons: Person[], personType: string, criteria: unknown): unknown[] {\n    return persons\n        .filter((person) => person.type === personType)\n        .filter((person) => {\n            let criteriaKeys = Object.keys(criteria) as (keyof Person)[];\n            return criteriaKeys.every((fieldName) => {\n                return person[fieldName] === criteria[fieldName];\n            });\n        });\n}\n\nexport const usersOfAge23 = filterPersons(persons, 'user', { age: 23 });\nexport const adminsOfAge23 = filterPersons(persons, 'admin', { age: 23 });\n\nconsole.log('Users of age 23:');\nusersOfAge23.forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Admins of age 23:');\nadminsOfAge23.forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/functions.html#overloads\n"},358:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {logPerson, Person, persons, filterPersons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof filterPersons>,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\nconst filtered1 = filterPersons(persons, 'user', {});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered1,\n        {type: 'user'; name: string; age: number; occupation: string}[]\n    >\n>();\n\nconst filtered2 = filterPersons(persons, 'user', {name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep'});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered2,\n        {type: 'user'; name: string; age: number; occupation: string}[]\n    >\n>();\n\nconst filtered3 = filterPersons(persons, 'admin', {});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered3,\n        {type: 'admin'; name: string; age: number; role: string}[]\n    >\n>();\n\nconst filtered4 = filterPersons(persons, 'admin', {name: 'Jane Doe', age: 32, role: 'Administrator'});\ntypeAssert<\n    IsTypeEqual<\n        typeof filtered4,\n        {type: 'admin'; name: string; age: number; role: string}[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string}))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & ({type: 'user'; occupation: string} | {type: 'admin'; role: string})\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},359:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Filtering was completely removed from the project.\n    It turned out that this feature was just not needed\n    for the end-user and we spent a lot of time just because\n    our office manager told us to do so. Next time we should\n    instead listen to the product management.\n\n    Anyway we have a new plan. CEO's friend Nick told us\n    that if we randomly swap user names from time to time\n    in the community, it would be very funny and the project\n    would definitely succeed!\n\nExercise:\n\n    Implement swap which receives 2 persons and returns them in\n    the reverse order. The function itself is already\n    there, actually. We just need to provide it with proper types.\n    Also this function shouldn't necessary be limited to just\n    Person types, lets type it so that it works with any two types\n    specified.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nfunction logUser(user: User) {\n    const pos = users.indexOf(user) + 1;\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\n}\n\nfunction logAdmin(admin: Admin) {\n    const pos = admins.indexOf(admin) + 1;\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\n}\n\nconst admins: Admin[] = [\n    {\n        type: 'admin',\n        name: 'Will Bruces',\n        age: 30,\n        role: 'Overseer'\n    },\n    {\n        type: 'admin',\n        name: 'Steve',\n        age: 40,\n        role: 'Steve'\n    }\n];\n\nconst users: User[] = [\n    {\n        type: 'user',\n        name: 'Moses',\n        age: 70,\n        occupation: 'Desert guide'\n    },\n    {\n        type: 'user',\n        name: 'Superman',\n        age: 28,\n        occupation: 'Ordinary person'\n    }\n];\n\nexport function swap(v1, v2) {\n    return [v2, v1];\n}\n\nfunction test1() {\n    console.log('test1:');\n    const [secondUser, firstAdmin] = swap(admins[0], users[1]);\n    logUser(secondUser);\n    logAdmin(firstAdmin);\n}\n\nfunction test2() {\n    console.log('test2:');\n    const [secondAdmin, firstUser] = swap(users[0], admins[1]);\n    logAdmin(secondAdmin);\n    logUser(firstUser);\n}\n\nfunction test3() {\n    console.log('test3:');\n    const [secondUser, firstUser] = swap(users[0], users[1]);\n    logUser(secondUser);\n    logUser(firstUser);\n}\n\nfunction test4() {\n    console.log('test4:');\n    const [firstAdmin, secondAdmin] = swap(admins[1], admins[0]);\n    logAdmin(firstAdmin);\n    logAdmin(secondAdmin);\n}\n\nfunction test5() {\n    console.log('test5:');\n    const [stringValue, numericValue] = swap(123, 'Hello World');\n    console.log(` - String: ${stringValue}`);\n    console.log(` - Numeric: ${numericValue}`);\n}\n\n[test1, test2, test3, test4, test5].forEach((test) => test());\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/basic-types.html#tuple\n// https://www.typescriptlang.org/docs/handbook/generics.html\n"},360:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {swap} from './index';\n\nconst pair1 = swap(123, 'hello');\ntypeAssert<\n    IsTypeEqual<\n        typeof pair1,\n        [string, number]\n    >\n>();\n\nconst pair2 = swap(true as const, false as const);\ntypeAssert<\n    IsTypeEqual<\n        typeof pair2,\n        [false, true]\n    >\n>();\n\nconst pair3 = swap(null, undefined);\ntypeAssert<\n    IsTypeEqual<\n        typeof pair3,\n        [undefined, null]\n    >\n>();\n"},361:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    Project grew and we ended up in a situation with\n    some users starting to have more influence.\n    Therefore, we decided to create a new person type\n    called PowerUser which is supposed to combine\n    everything User and Admin have.\n\nExercise:\n\n    Define type PowerUser which should have all fields\n    from both User and Admin (except for type),\n    and also have type 'powerUser' without duplicating\n    all the fields in the code.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype PowerUser = unknown;\n\nexport type Person = User | Admin | PowerUser;\n\nexport const persons: Person[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    {\n        type: 'powerUser',\n        name: 'Nikki Stone',\n        age: 45,\n        role: 'Moderator',\n        occupation: 'Cat groomer'\n    }\n];\n\nfunction isAdmin(person: Person): person is Admin {\n    return person.type === 'admin';\n}\n\nfunction isUser(person: Person): person is User {\n    return person.type === 'user';\n}\n\nfunction isPowerUser(person: Person): person is PowerUser {\n    return person.type === 'powerUser';\n}\n\nexport function logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    if (isPowerUser(person)) {\n        additionalInformation = `${person.role}, ${person.occupation}`;\n    }\n    console.log(`${person.name}, ${person.age}, ${additionalInformation}`);\n}\n\nconsole.log('Admins:');\npersons.filter(isAdmin).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Users:');\npersons.filter(isUser).forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Power users:');\npersons.filter(isPowerUser).forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\n"},362:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, FirstArgument, typeAssert} from 'type-assertions';\nimport {logPerson, Person, persons} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        Person,\n        {name: string; age: number} & (\n            | {type: 'user'; occupation: string}\n            | {type: 'admin'; role: string}\n            | {type: 'powerUser'; occupation: string; role: string}\n        )\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof persons,\n        ({name: string; age: number} & (\n            | {type: 'user'; occupation: string}\n            | {type: 'admin'; role: string}\n            | {type: 'powerUser'; occupation: string; role: string}\n        ))[]\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        FirstArgument<typeof logPerson>,\n        {name: string; age: number} & (\n            | {type: 'user'; occupation: string}\n            | {type: 'admin'; role: string}\n            | {type: 'powerUser'; occupation: string; role: string}\n        )\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        ReturnType<typeof logPerson>,\n        void\n    >\n>();\n"},363:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    PowerUsers idea was bad. Once those users got\n    extended permissions, they started bullying others\n    and we lost a lot of great users.\n    As a response we spent all the remaining money\n    on the marketing and got even more users.\n    We need to start preparing to move everything to a\n    real database. For now we just do some mocks.\n\n    The server API format was decided to be the following:\n\n    In case of success: { status: 'success', data: RESPONSE_DATA }\n    In case of error: { status: 'error', error: ERROR_MESSAGE }\n\n    The API engineer started creating types for this API and\n    quickly figured out that the amount of types needs to be\n    created is too big.\n\nExercise:\n\n    Remove UsersApiResponse and AdminsApiResponse types\n    and use generic type ApiResponse in order to specify API\n    response formats for each of the functions.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' }\n];\n\nexport type ApiResponse<T> = unknown;\n\ntype AdminsApiResponse = (\n    {\n        status: 'success';\n        data: Admin[];\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\nexport function requestAdmins(callback: (response: AdminsApiResponse) => void) {\n    callback({\n        status: 'success',\n        data: admins\n    });\n}\n\ntype UsersApiResponse = (\n    {\n        status: 'success';\n        data: User[];\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\nexport function requestUsers(callback: (response: UsersApiResponse) => void) {\n    callback({\n        status: 'success',\n        data: users\n    });\n}\n\nexport function requestCurrentServerTime(callback: (response: unknown) => void) {\n    callback({\n        status: 'success',\n        data: Date.now()\n    });\n}\n\nexport function requestCoffeeMachineQueueLength(callback: (response: unknown) => void) {\n    callback({\n        status: 'error',\n        error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\n    });\n}\n\nfunction logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nfunction startTheApp(callback: (error: Error | null) => void) {\n    requestAdmins((adminsResponse) => {\n        console.log('Admins:');\n        if (adminsResponse.status === 'success') {\n            adminsResponse.data.forEach(logPerson);\n        } else {\n            return callback(new Error(adminsResponse.error));\n        }\n\n        console.log();\n\n        requestUsers((usersResponse) => {\n            console.log('Users:');\n            if (usersResponse.status === 'success') {\n                usersResponse.data.forEach(logPerson);\n            } else {\n                return callback(new Error(usersResponse.error));\n            }\n\n            console.log();\n\n            requestCurrentServerTime((serverTimeResponse) => {\n                console.log('Server time:');\n                if (serverTimeResponse.status === 'success') {\n                    console.log(`   ${new Date(serverTimeResponse.data).toLocaleString()}`);\n                } else {\n                    return callback(new Error(serverTimeResponse.error));\n                }\n\n                console.log();\n\n                requestCoffeeMachineQueueLength((coffeeMachineQueueLengthResponse) => {\n                    console.log('Coffee machine queue length:');\n                    if (coffeeMachineQueueLengthResponse.status === 'success') {\n                        console.log(`   ${coffeeMachineQueueLengthResponse.data}`);\n                    } else {\n                        return callback(new Error(coffeeMachineQueueLengthResponse.error));\n                    }\n\n                    callback(null);\n                });\n            });\n        });\n    });\n}\n\nstartTheApp((e: Error | null) => {\n    console.log();\n    if (e) {\n        console.log(`Error: \"${e.message}\", but it's fine, sometimes errors are inevitable.`)\n    } else {\n        console.log('Success!');\n    }\n});\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/generics.html\n"},364:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, IsTypeAssignable, Not, typeAssert} from 'type-assertions';\nimport {\n    ApiResponse,\n    requestAdmins,\n    requestUsers,\n    requestCoffeeMachineQueueLength,\n    requestCurrentServerTime\n} from './index';\n\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<number>,\n        {status: 'success'; data: number}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<number>,\n        {status: 'error'; error: string}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<boolean>,\n        {status: 'success'; data: boolean}\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ApiResponse<boolean>,\n        {status: 'error'; error: string}\n    >\n>();\ntypeAssert<\n    Not<\n        IsTypeEqual<\n            ApiResponse<number>,\n            unknown\n        >\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestAdmins,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: {\n                            type: 'admin';\n                            name: string;\n                            age: number;\n                            role: string;\n                    }[]\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestUsers,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: {\n                            type: 'user';\n                            name: string;\n                            age: number;\n                            occupation: string;\n                    }[]\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestCurrentServerTime,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: number;\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof requestCoffeeMachineQueueLength,\n        (\n            callback: (\n                response: {\n                    status: 'success';\n                    data: number;\n                } | {\n                    status: 'error';\n                    error: string;\n                }\n            ) => void\n        ) => void\n    >\n>();\n"},365:function(n,e,t){"use strict";t.r(e),e.default="/*\n\nIntro:\n\n    We have asynchronous functions now, advanced technology.\n    This makes us a tech startup officially now.\n    But one of the consultants spoiled our dreams about\n    inevitable future IT leadership.\n    He said that callback-based asynchronicity is not\n    popular anymore and everyone should use Promises.\n    He promised that if we switch to Promises, this would\n    bring promising results.\n\nExercise:\n\n    We don't want to reimplement all the data-requesting\n    functions. Let's decorate the old callback-based\n    functions with the new Promise-compatible result.\n    The final function should return a Promise which\n    would resolve with the final data directly\n    (i.e. users or admins) or would reject with an error\n    (or type Error).\n\n    The function should be named promisify.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' }\n];\n\nexport type ApiResponse<T> = (\n    {\n        status: 'success';\n        data: T;\n    } |\n    {\n        status: 'error';\n        error: string;\n    }\n);\n\nexport function promisify(arg: unknown): unknown {\n    return null;\n}\n\nconst oldApi = {\n    requestAdmins(callback: (response: ApiResponse<Admin[]>) => void) {\n        callback({\n            status: 'success',\n            data: admins\n        });\n    },\n    requestUsers(callback: (response: ApiResponse<User[]>) => void) {\n        callback({\n            status: 'success',\n            data: users\n        });\n    },\n    requestCurrentServerTime(callback: (response: ApiResponse<number>) => void) {\n        callback({\n            status: 'success',\n            data: Date.now()\n        });\n    },\n    requestCoffeeMachineQueueLength(callback: (response: ApiResponse<number>) => void) {\n        callback({\n            status: 'error',\n            error: 'Numeric value has exceeded Number.MAX_SAFE_INTEGER.'\n        });\n    }\n};\n\nexport const api = {\n    requestAdmins: promisify(oldApi.requestAdmins),\n    requestUsers: promisify(oldApi.requestUsers),\n    requestCurrentServerTime: promisify(oldApi.requestCurrentServerTime),\n    requestCoffeeMachineQueueLength: promisify(oldApi.requestCoffeeMachineQueueLength)\n};\n\nfunction logPerson(person: Person) {\n    console.log(\n        ` - ${person.name}, ${person.age}, ${person.type === 'admin' ? person.role : person.occupation}`\n    );\n}\n\nasync function startTheApp() {\n    console.log('Admins:');\n    (await api.requestAdmins()).forEach(logPerson);\n    console.log();\n\n    console.log('Users:');\n    (await api.requestUsers()).forEach(logPerson);\n    console.log();\n\n    console.log('Server time:');\n    console.log(`   ${new Date(await api.requestCurrentServerTime()).toLocaleString()}`);\n    console.log();\n\n    console.log('Coffee machine queue length:');\n    console.log(`   ${await api.requestCoffeeMachineQueueLength()}`);\n}\n\nstartTheApp().then(\n    () => {\n        console.log('Success!');\n    },\n    (e: Error) => {\n        console.log(`Error: \"${e.message}\", but it's fine, sometimes errors are inevitable.`);\n    }\n);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/generics.html\n"},366:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, IsTypeAssignable, FirstArgument, typeAssert} from 'type-assertions';\nimport {api, promisify, ApiResponse} from './index';\n\ntypeAssert<\n    IsTypeAssignable<\n        FirstArgument<typeof promisify>,\n        (callback: (response: ApiResponse<number>) => void) => void\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        FirstArgument<typeof promisify>,\n        (callback: (response: ApiResponse<string>) => void) => void\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ReturnType<typeof promisify>,\n        () => Promise<number>\n    >\n>();\ntypeAssert<\n    IsTypeAssignable<\n        ReturnType<typeof promisify>,\n        () => Promise<boolean>\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestAdmins,\n        () => Promise<\n            {\n                type: 'admin';\n                name: string;\n                age: number;\n                role: string;\n            }[]\n        >\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestUsers,\n        () => Promise<\n            {\n                type: 'user';\n                name: string;\n                age: number;\n                occupation: string;\n            }[]\n        >\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestCurrentServerTime,\n        () => Promise<number>\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof api.requestCoffeeMachineQueueLength,\n        () => Promise<number>\n    >\n>();\n\n"},367:function(n,e,t){"use strict";t.r(e),e.default="import {\n    strReverse,\n    strToLower,\n    strToUpper,\n    strRandomize,\n    strInvertCase\n} from 'str-utils';\n\n/*\n\nIntro:\n\n    In order to engage users in the communication with\n    each other we have decided to decorate usernames\n    in various ways. A brief search led us to a library\n    called \"str-utils\". Bad thing is that it lacks\n    TypeScript declarations.\n\nExercise:\n\n    Check str-utils module implementation at:\n    node_modules/str-utils/index.js\n    node_modules/str-utils/README.md\n\n    Provide type declaration for that module in:\n    declarations/str-utils/index.d.ts\n\n    Try to avoid duplicates of type declarations,\n    use type aliases.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve' },\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer' },\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide' },\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person' },\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover' }\n];\n\nconst isAdmin = (person: Person): person is Admin => person.type === 'admin';\nconst isUser = (person: Person): person is User => person.type === 'user';\n\nexport const nameDecorators = [\n    strReverse,\n    strToLower,\n    strToUpper,\n    strRandomize,\n    strInvertCase\n];\n\nfunction logPerson(person: Person) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    const randomNameDecorator = nameDecorators[\n        Math.round(Math.random() * (nameDecorators.length - 1))\n    ];\n    const name = randomNameDecorator(person.name);\n    console.log(\n        ` - ${name}, ${person.age}, ${additionalInformation}`\n    );\n}\n\n([] as Person[])\n    .concat(users, admins)\n    .forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules\n"},368:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, ArrayElement, typeAssert} from 'type-assertions';\nimport {nameDecorators} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        ArrayElement<typeof nameDecorators>,\n        (input: string) => string\n    >\n>();\n"},369:function(n,e,t){"use strict";t.r(e),e.default="declare module 'str-utils' {\n    // export const ...\n    // export function ...\n}\n"},373:function(n,e,t){"use strict";t.r(e),e.default="import {\n    getMaxIndex,\n    getMaxElement,\n    getMinIndex,\n    getMinElement,\n    getMedianIndex,\n    getMedianElement,\n    getAverageValue\n} from 'stats';\n\n/*\n\nIntro:\n\n    We have so many users and admins in the database!\n    CEO's father Jeff says that we are a BigData\n    startup now. We have no idea what it means, but\n    Jeff says that we need to do some statistics and\n    analytics.\n\n    We've ran a questionnaire within the team to\n    figure out what do we know about statistics.\n    The only person who filled it was our coffee\n    machine maintainer. The answers were:\n\n     * Maximums\n     * Minumums\n     * Medians\n     * Averages\n\n    We found a piece of code on stackoverflow and\n    compiled it into a module `stats`. The bad\n    thing is that it lacks type declarations.\n\nExercise:\n\n    Check stats module implementation at:\n    node_modules/stats/index.js\n    node_modules/stats/README.md\n\n    Provide type declaration for that module in:\n    declarations/stats/index.d.ts\n\nHigher difficulty bonus exercise:\n\n    Avoid duplicates of type declarations.\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator' },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver' },\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve' },\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer' },\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support' }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep' },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut' },\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide' },\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person' },\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover' }\n];\n\nfunction logUser(user: User | null) {\n    if (!user) {\n        console.log(' - none');\n        return;\n    }\n    const pos = users.indexOf(user) + 1;\n    console.log(` - #${pos} User: ${user.name}, ${user.age}, ${user.occupation}`);\n}\n\nfunction logAdmin(admin: Admin | null) {\n    if (!admin) {\n        console.log(' - none');\n        return;\n    }\n    const pos = admins.indexOf(admin) + 1;\n    console.log(` - #${pos} Admin: ${admin.name}, ${admin.age}, ${admin.role}`);\n}\n\nconst compareUsers = (a: User, b: User) => a.age - b.age;\nconst compareAdmins = (a: Admin, b: Admin) => a.age - b.age;\nconst colorizeIndex = (value: number) => String(value + 1);\n\nexport {\n    getMaxIndex,\n    getMaxElement,\n    getMinIndex,\n    getMinElement,\n    getMedianIndex,\n    getMedianElement,\n    getAverageValue\n};\n\nconsole.log('Youngest user:');\nlogUser(getMinElement(users, compareUsers));\nconsole.log(` - was ${colorizeIndex(getMinIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Median user:');\nlogUser(getMedianElement(users, compareUsers));\nconsole.log(` - was ${colorizeIndex(getMedianIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Oldest user:');\nlogUser(getMaxElement(users, compareUsers));\nconsole.log(` - was ${colorizeIndex(getMaxIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Average user age:');\nconsole.log(` - ${String(getAverageValue(users, ({age}: User) => age))} years`);\n\nconsole.log();\n\nconsole.log('Youngest admin:');\nlogAdmin(getMinElement(admins, compareAdmins));\nconsole.log(` - was ${colorizeIndex(getMinIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Median admin:');\nlogAdmin(getMedianElement(admins, compareAdmins));\nconsole.log(` - was ${colorizeIndex(getMedianIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Oldest admin:');\nlogAdmin(getMaxElement(admins, compareAdmins));\nconsole.log(` - was ${colorizeIndex(getMaxIndex(users, compareUsers))}th to register`);\n\nconsole.log();\n\nconsole.log('Average admin age:');\nconsole.log(` - ${String(getAverageValue(admins, ({age}: Admin) => age))} years`);\n"},374:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {\n    getMaxIndex,\n    getMaxElement,\n    getMinIndex,\n    getMinElement,\n    getMedianIndex,\n    getMedianElement,\n    getAverageValue\n} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMaxIndex,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMinIndex,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMedianIndex,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => number\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMaxElement,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMinElement,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getMedianElement,\n        <T>(input: T[], comparator: (a: T, b: T) => number) => T\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof getAverageValue,\n        <T>(input: T[], getValue: (item: T) => number) => number\n    >\n>();\n"},375:function(n,e,t){"use strict";t.r(e),e.default="declare module 'stats' {\n    export function getMaxIndex(input: unknown, comparator: unknown): unknown;\n}\n"},379:function(n,e,t){"use strict";t.r(e),e.default="import * as dateWizard from 'date-wizard';\nimport './module-augmentations/date-wizard';\n\n/*\n\nIntro:\n\n    The next logical step for us is to provide more\n    precise registration date for our users and admins.\n    We've approximately made up dates for each user and\n    admin and used a library called \"date-wizard\" in\n    order to pretty-format the dates.\n\n    Unfortunately, type declarations which came with\n    \"date-wizard\" library were incomplete.\n\n    1. DateDetails interface is missing\n       time related fields such as hours, minutes and\n       seconds.\n    2. Function \"pad\" is exported but not declared.\n\nExercise:\n\n    Check date-wizard module implementation at:\n    node_modules/date-wizard/index.js\n    node_modules/date-wizard/index.d.ts\n\n    Extend type declaration of that module in:\n    module-augmentations/date-wizard/index.ts\n\n*/\n\ninterface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n    registered: Date;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n    registered: Date;\n}\n\ntype Person = User | Admin;\n\nconst admins: Admin[] = [\n    { type: 'admin', name: 'Jane Doe', age: 32, role: 'Administrator', registered: new Date('2016-06-01T16:23:13') },\n    { type: 'admin', name: 'Bruce Willis', age: 64, role: 'World saver', registered: new Date('2017-02-11T12:12:11') },\n    { type: 'admin', name: 'Steve', age: 40, role: 'Steve', registered: new Date('2018-01-05T11:02:30') },\n    { type: 'admin', name: 'Will Bruces', age: 30, role: 'Overseer', registered: new Date('2018-08-12T10:01:24') },\n    { type: 'admin', name: 'Superwoman', age: 28, role: 'Customer support', registered: new Date('2019-03-25T07:51:05') }\n];\n\nconst users: User[] = [\n    { type: 'user', name: 'Max Mustermann', age: 25, occupation: 'Chimney sweep', registered: new Date('2016-02-15T09:25:13') },\n    { type: 'user', name: 'Kate M\xfcller', age: 23, occupation: 'Astronaut', registered: new Date('2016-03-23T12:47:03') },\n    { type: 'user', name: 'Moses', age: 70, occupation: 'Desert guide', registered: new Date('2017-02-19T17:22:56') },\n    { type: 'user', name: 'Superman', age: 28, occupation: 'Ordinary person', registered: new Date('2018-02-25T19:44:28') },\n    { type: 'user', name: 'Inspector Gadget', age: 31, occupation: 'Undercover', registered: new Date('2019-03-25T09:29:12') }\n];\n\nconst isAdmin = (person: Person): person is Admin => person.type === 'admin';\nconst isUser = (person: Person): person is User => person.type === 'user';\n\nfunction logPerson(person: Person, index: number) {\n    let additionalInformation: string = '';\n    if (isAdmin(person)) {\n        additionalInformation = person.role;\n    }\n    if (isUser(person)) {\n        additionalInformation = person.occupation;\n    }\n    let registeredAt = dateWizard(person.registered, '{date}.{month}.{year} {hours}:{minutes}');\n    let num = `#${dateWizard.pad(index + 1)}`;\n    console.log(\n        ` - ${num}: ${person.name}, ${person.age}, ${additionalInformation}, ${registeredAt}`\n    );\n}\n\nexport {\n    dateWizard\n};\n\nconsole.log('All users:');\n\n([] as Person[])\n    .concat(users, admins)\n    .forEach(logPerson);\n\nconsole.log();\n\nconsole.log('Early birds:');\n\n([] as Person[])\n    .concat(users, admins)\n    .filter((person) => dateWizard.dateDetails(person.registered).hours < 10)\n    .forEach(logPerson);\n\n// In case if you are stuck:\n// https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules\n// https://www.typescriptlang.org/docs/handbook/declaration-merging.html\n"},380:function(n,e,t){"use strict";t.r(e),e.default="import {IsTypeEqual, typeAssert} from 'type-assertions';\nimport {dateWizard} from './index';\n\ntypeAssert<\n    IsTypeEqual<\n        dateWizard.DateDetails,\n        {\n            year: number;\n            month: number;\n            date: number;\n            hours: number;\n            minutes: number;\n            seconds: number;\n        }\n    >\n>();\n\ntypeAssert<\n    IsTypeEqual<\n        typeof dateWizard.pad,\n        (level: number) => string\n    >\n>();\n"},381:function(n,e,t){"use strict";t.r(e),e.default="// This enabled module augmentation mode.\nimport 'date-wizard';\n\ndeclare module 'date-wizard' {\n    // Add your module extensions here.\n}\n"},385:function(n,e,t){var r=t(386),s=["init","updateFiles","getErrors"];n.exports=function(){var n=new Worker(t.p+"6a3971982c839de5c6d0.worker.js",{name:"[hash].worker.js"});return r(n,s),n}},389:function(n,e,t){"use strict";t.r(e);var r=t(20),s=t.n(r),o=t(253),a=t.n(o),i=t(39),l=t(139),c=t(119),u=t(255),p=t.n(u);function d(){return s.a.createElement(p.a,{color:"gray"})}function m(n){var e=n.observable,t=n.render,o=function(n){var e=Object(r.useState)(!1),t=Object(c.a)(e,2)[1],s=Object(r.useMemo)((function(){var e={value:void 0,subscription:void 0},r=!1;return e.subscription=n.subscribe((function(n){e.value=n,r&&t((function(n){return!n}))})),r=!0,e}),[n,t]),o=s.subscription,a=s.value;return Object(r.useLayoutEffect)((function(){return function(){return null===o||void 0===o?void 0:o.unsubscribe()}}),[o]),a}(e);return void 0===o?s.a.createElement(d,null):s.a.createElement(s.a.Fragment,null,t(o))}function f(n,e){return s.a.createElement(m,{observable:n,render:e})}var g=t(41),y=t(161),h=t(49),b=t(395),v=function(){var n=new b.a(1),e={panels:{exercise:{collapsed:!1},files:{collapsed:!1}}};function t(t){e=t,n.next(t)}return n.next(e),{observable$:n,expandPanel:function(n){return t(Object(h.a)(Object(h.a)({},e),{},{panels:Object(h.a)(Object(h.a)({},e.panels),{},Object(y.a)({},n,Object(h.a)(Object(h.a)({},e.panels[n]),{},{collapsed:!1})))}))},collapsePanel:function(n){return t(Object(h.a)(Object(h.a)({},e),{},{panels:Object(h.a)(Object(h.a)({},e.panels),{},Object(y.a)({},n,Object(h.a)(Object(h.a)({},e.panels[n]),{},{collapsed:!0})))}))}}}();function w(){var n=Object(i.a)(["\n    position: relative;\n    background-color: ",";\n    display: flex;\n    flex-direction: column;\n    flex: 0 0 ",";\n    ",": 1px #ddd solid;\n    &:last-of-type {\n        ",": none;\n        ",": 1px #ddd solid;\n    }\n    transition: flex-basis 0.2s linear, background-color 0.2s linear;\n"]);return w=function(){return n},n}function x(){var n=Object(i.a)(["\n    display: block;\n    float: right;\n    border: none;\n    padding: 5px 10px;\n    background: transparent;\n    font-weight: bold;\n    cursor: pointer;\n    &::before {\n        content: '_';\n    }\n"]);return x=function(){return n},n}function A(){var n=Object(i.a)(["\n    flex: 1 1 auto;\n    padding: 30px 0 0;\n    transform: scaleX(100%) scaleY(100%);\n    transform-origin: ",";\n    opacity: 1;\n    transition: transform 0.2s linear, opacity 0.2s linear;\n    ","\n"]);return A=function(){return n},n}function E(){var n=Object(i.a)(["\n    flex: 1 1 auto;\n    font-weight: bold;\n    color: rgba(0, 0, 0, 0.75);\n    line-height: 30px;\n    padding: 0 10px;\n"]);return E=function(){return n},n}function T(){var n=Object(i.a)(["\n    position: absolute;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 0;\n    flex-shrink: 0;\n    height: 30px;\n    min-width: 100%;\n    transform: rotate(0) translateX(0);\n    transform-origin: top left;\n    cursor: pointer;\n    background: #eee;\n    border-bottom: 1px #ddd solid;\n    ","\n"]);return T=function(){return n},n}var I=g.a.div(T(),(function(n){var e=n.collapsed,t=n.orientation;return e&&"vertical"===t?"\n                transform: rotate(-90deg) translateX(-100%);\n                button {\n                    display: none;\n                }\n            ":""})),O=g.a.div(E()),U=g.a.div(A(),(function(n){return"vertical"===n.orientation?"left center":"center bottom"}),(function(n){var e=n.collapsed,t=n.orientation;return e?"\n                position: absolute;\n                transform: ".concat("vertical"===t?"scaleX":"scaleY","(0);\n                opacity: 0;\n            "):""})),k=g.a.button(x()),P=g.a.div(w(),(function(n){return n.collapsed?"#eee":"#f6f6f6"}),(function(n){var e=n.collapsed,t=n.orientation;return e?"30px":"".concat("vertical"===t?200:150,"px")}),(function(n){return"vertical"===n.orientation?"border-right":"border-bottom"}),(function(n){return"vertical"===n.orientation?"border-right":"border-bottom"}),(function(n){return"vertical"===n.orientation?"border-left":"border-top"}));function j(n){var e=n.id,t=n.header,o=n.orientation,a=n.children,i=Object(r.useMemo)((function(){return[function(){return v.collapsePanel(e)},function(){return v.expandPanel(e)}]}),[e]),l=Object(c.a)(i,2),u=l[0],p=l[1];return f(v.observable$,(function(n){var r=n.panels;return s.a.createElement(P,{collapsed:r[e].collapsed,orientation:o},s.a.createElement(I,{collapsed:r[e].collapsed,orientation:o,onClick:r[e].collapsed?p:u},s.a.createElement(O,null,t),s.a.createElement(k,null)),s.a.createElement(U,{collapsed:r[e].collapsed,orientation:o},a))}))}function M(){var n=Object(i.a)(["\n    margin-left: 20px;\n    font-size: 12px;\n    color: #339900;\n"]);return M=function(){return n},n}function q(){var n=Object(i.a)(["\n    flex: 0 0 auto;\n    padding: 0 10px;\n    height: 30px;\n    line-height: 30px;\n    border-bottom: 1px #ddd solid;\n    background: #eee;\n    font-size: 14px;\n    color: #0033aa;\n"]);return q=function(){return n},n}var S=g.a.div(q()),R=g.a.span(M());function $(n){var e=n.filename,t=n.readOnly;return s.a.createElement(S,null,e.replace(/^\//,""),t&&s.a.createElement(R,null,"Read Only"))}var C=function(n){var e=n.color;return s.a.createElement("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:"16",height:"16"},s.a.createElement("path",{d:"M0 4C3.22 4 5.24 4 6.04 4C6.43 4 6.8 4.19 7.03 4.51C7.23 4.78 7.71 5.46 8.49 6.54L16 6.54L16 16L0 16L0 4Z",fill:e}))},F=function(n){var e=n.color;return s.a.createElement("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",width:"16",height:"16"},s.a.createElement("path",{d:"M2 10L8 10L8 4L14 4L14 16L2 16",fill:e}),s.a.createElement("path",{d:"M2 9L7 9L7 4",fill:e}))};function D(){var n=Object(i.a)([""]);return D=function(){return n},n}function W(){var n=Object(i.a)(["\n    display: block;\n    cursor: ",";\n    pointer-events: ",";\n    color: ",";\n    height: 30px;\n    line-height: 30px;\n    font-size: 14px;\n    ","\n"]);return W=function(){return n},n}function N(){var n=Object(i.a)(["\n    background: none;\n    color: white;\n    cursor: pointer;\n    border: none;\n    padding: 2px 5px;\n    margin-right: -6px;\n    &:hover {\n        text-decoration: underline;\n        text-decoration-style: dotted;\n    }\n"]);return N=function(){return n},n}function z(){var n=Object(i.a)(["\n    float: right;\n    margin-right: 15px;\n    color: gray;\n"]);return z=function(){return n},n}function L(){var n=Object(i.a)(["\n    position: relative;\n    z-index: 1;\n"]);return L=function(){return n},n}function B(){var n=Object(i.a)(["\n    margin-left: 15px;\n"]);return B=function(){return n},n}function _(){var n=Object(i.a)(["\n    position: relative;\n    user-select: none;\n"]);return _=function(){return n},n}var K=g.a.div(_()),J=g.a.div(B()),V=g.a.div(L()),Q=g.a.div(z()),G=g.a.button(N()),H=g.a.div(W(),(function(n){return n.selectable?"pointer":"default"}),(function(n){return n.selectable?"all":"none"}),(function(n){var e=n.selected,t=n.readOnly;return e?"white":t?"#555":"black"}),(function(n){return n.selected?"\n                &::before {\n                    z-index: 0;\n                    display: block;\n                    position: absolute;\n                    content: '';\n                    background: rgb(101,125,176);\n                    left: 0;\n                    right: 0;\n                    height: 30px;\n                }":""})),X=g.a.div(D());function Y(n){var e=n.branch,t=n.selectedFilename,o=n.onSelectFilename,a=n.modifiedFilenames,i=n.revertFile,l=Object(r.useCallback)((function(){o(e.filename)}),[e,o]),c=t===e.filename,u=e.children.length>0,p=Object(r.useCallback)((function(){return i(e.filename)}),[e,i]);return s.a.createElement(J,null,s.a.createElement(H,{onClick:l,selectable:0===e.children.length,selected:c,readOnly:e.readOnly},s.a.createElement(V,null,u?s.a.createElement(C,{color:"gray"}):s.a.createElement(F,{color:c?"rgba(255,255,255,0.75)":"gray"})," ",e.name,s.a.createElement(Q,null,a[e.filename]&&(c?s.a.createElement(G,{onClick:p},"revert"):"*")))),u&&s.a.createElement(X,null,e.children.map((function(n){return s.a.createElement(Y,{key:n.filename,branch:n,selectedFilename:t,onSelectFilename:o,modifiedFilenames:a,revertFile:i})}))))}function Z(n){var e=n.fileTree,t=n.selectedFilename,o=n.onSelectFilename,a=n.modifiedFilenames,i=n.revertFile,l=Object(r.useMemo)((function(){return function(n){for(var e=[],t={},r=0,s=Object.keys(n);r<s.length;r++){for(var o=s[r],a=o.replace(/^\//,"").split("/"),i=null,l=[];a.length>1;){var c=a.shift();l.push(c);var u=l.join("/");t[u]||(t[u]={name:c,filename:u,readOnly:!0,children:[]},i?i.children.push(t[u]):e.push(t[u])),i=t[u]}var p={name:a.shift(),filename:o,readOnly:Boolean(n[o].readOnly),children:[]};i?i.children.push(p):e.push(p)}return e}(e)}),[e]);return s.a.createElement(K,null,l.map((function(n){return s.a.createElement(Y,{key:n.filename,branch:n,selectedFilename:t,onSelectFilename:o,modifiedFilenames:a,revertFile:i})})))}var nn=t(170),en=t.n(nn),tn=t(257),rn=t(258),sn=t(261),on=t(260),an=t(129),ln=t(182),cn=t.n(ln),un=t(207),pn=t(259);function dn(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if("string"===typeof n)return n;if(void 0===n)return"";var r="";if(t){r+=e;for(var s=0;s<t;s++)r+="  "}if(r+=n.messageText,t++,n.next){var o,a=Object(pn.a)(n.next);try{for(a.s();!(o=a.n()).done;){var i=o.value;r+=dn(i,e,t)}}catch(l){a.e(l)}finally{a.f()}}return r}function mn(){return(mn=Object(un.a)(cn.a.mark((function n(e){var t,r,s,o;return cn.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(e&&!e.isDisposed()){n.next=2;break}return n.abrupt("return");case 2:return n.next=4,an.languages.typescript.getTypeScriptWorker();case 4:return t=n.sent,n.next=7,t(e.uri);case 7:return r=n.sent,n.next=10,Promise.all([r.getSyntacticDiagnostics(e.uri.toString()),r.getSemanticDiagnostics(e.uri.toString())]);case 10:s=n.sent.reduce((function(n,e){return n.concat(e)})),o=s.map((function(n){var t=e.getPositionAt(n.start),r=e.getPositionAt(n.start+n.length);return{severity:an.MarkerSeverity.Error,startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:r.lineNumber,endColumn:r.column,message:dn(n.messageText,"\n")}})),an.editor.setModelMarkers(e,"typescript",o);case 13:case"end":return n.stop()}}),n)})))).apply(this,arguments)}an.languages.typescript.typescriptDefaults.setCompilerOptions({strict:!0,target:an.languages.typescript.ScriptTarget.ES2018,moduleResolution:an.languages.typescript.ModuleResolutionKind.NodeJs,typeRoots:["declarations"]});var fn={ts:"typescript",json:"json"},gn=function(n){Object(sn.a)(t,n);var e=Object(on.a)(t);function t(){var n;Object(tn.a)(this,t);for(var r=arguments.length,s=new Array(r),o=0;o<r;o++)s[o]=arguments[o];return(n=e.call.apply(e,[this].concat(s))).instance=null,n.instanceDiv=null,n.models={},n.viewStates={},n.lastUpdates={},n.assignRef=function(e){return n.instanceDiv=e},n}return Object(rn.a)(t,[{key:"componentDidMount",value:function(){var n=this;this.models=Object.keys(this.props.values).reduce((function(e,t){var r=n.props.values[t].content;n.lastUpdates[t]=r;var s=an.editor.createModel(r,fn[t.split(".").pop()],an.Uri.file("".concat(n.props.namespace,"/").concat(t)));return s.onDidChangeContent(Object(nn.debounce)((function(){var e=s.getValue();n.lastUpdates[t]=e,n.props.onChange(t,e)}),200)),e[t]=s,e}),{}),this.instance=an.editor.create(this.instanceDiv,Object(h.a)(Object(h.a)({},this.props.options),{},{model:this.models[this.props.selectedFilename],readOnly:Boolean(this.props.values[this.props.selectedFilename].readOnly),renderValidationDecorations:"on"})),this.instance.layout()}},{key:"componentWillUnmount",value:function(){for(var n=0,e=Object.keys(this.models);n<e.length;n++){var t=e[n];this.models[t].dispose()}this.instance&&this.instance.dispose()}},{key:"componentDidUpdate",value:function(n){if(this.instance){var e=this.props.selectedFilename;if(e!==n.selectedFilename){var t=this.models[e];this.viewStates[n.selectedFilename]=this.instance.saveViewState(),this.instance.setModel(t),this.instance.updateOptions({readOnly:Boolean(this.props.values[e].readOnly)}),function(n){mn.apply(this,arguments)}(t);var r=this.viewStates[e];r&&this.instance.restoreViewState(r),this.instance.focus()}if(this.props.position!==n.position&&void 0!==this.props.position){var s=this.models[this.props.selectedFilename].getPositionAt(this.props.position);this.instance.setPosition(s),this.instance.revealLine(s.lineNumber),this.instance.focus()}if(this.props.width===n.width&&this.props.height===n.height||this.instance.layout(),this.props.values!==n.values)for(var o=0,a=Object.entries(this.props.values);o<a.length;o++){var i=Object(c.a)(a[o],2),l=i[0],u=i[1];u.content!==this.lastUpdates[l]&&(this.lastUpdates[l]=u.content,this.models[l].setValue(u.content))}}}},{key:"render",value:function(){return s.a.createElement("div",{ref:this.assignRef,className:"original-monaco-editor",style:{width:this.props.width,height:this.props.height}})}}]),t}(s.a.Component);function yn(){var n=Object(i.a)(["\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    overflow: hidden;\n"]);return yn=function(){return n},n}var hn=g.a.div(yn());function bn(n){var e=Object(r.useState)({width:"100%",height:"100%"}),t=Object(c.a)(e,2),o=t[0],a=t[1],i=Object(r.useRef)(null);return Object(r.useEffect)((function(){var n=en()((function(){a((function(n){if(!i.current)return n;var e="".concat(i.current.offsetWidth,"px"),t="".concat(i.current.offsetHeight,"px");return n.width===e&&n.height===t?n:{width:e,height:t}}))}),100);window.addEventListener("resize",n,{passive:!0});var e=setInterval(n,500);return function(){window.removeEventListener("resize",n),clearInterval(e)}}),[i]),s.a.createElement(hn,{ref:i},s.a.createElement(gn,Object.assign({},n,o)))}function vn(){var n=Object(i.a)(["\n    font-family: monospace;\n    font-size: 12px;\n    white-space: pre-wrap;\n    cursor: pointer;\n    & + & {\n        margin-top: 10px;\n    }\n    &:hover {\n        text-decoration: underline;\n    }\n    &::before {\n        counter-increment: errors;\n        content: counter(errors) '.';\n        display: inline-block;\n        width: 30px;\n        text-align: right;\n        margin-right: 10px;\n        margin-left: -40px;\n        color: gray;\n    }\n"]);return vn=function(){return n},n}function wn(){var n=Object(i.a)(["\n    padding: 0;\n    margin: 5px 0 5px 40px;\n    list-style: none;\n    counter-reset: errors;\n"]);return wn=function(){return n},n}var xn=g.a.ol(wn()),An=g.a.li(vn()),En=s.a.memo((function(n){var e=n.errors,t=n.onClick;return s.a.createElement(xn,null,e.map((function(n,e){return s.a.createElement(An,{key:e,onClick:function(){return t(n)}},n.messageText)})))})),Tn={"/node_modules/type-assertions/index.ts":{content:t(346).default,readOnly:!0}};function In(n){return JSON.stringify(n,null,4)}var On={1:Object(h.a)({"/index.ts":{content:t(347).default},"/test.ts":{content:t(348).default,readOnly:!0}},Tn),2:Object(h.a)({"/index.ts":{content:t(349).default},"/test.ts":{content:t(350).default,readOnly:!0}},Tn),3:Object(h.a)({"/index.ts":{content:t(351).default},"/test.ts":{content:t(352).default,readOnly:!0}},Tn),4:Object(h.a)({"/index.ts":{content:t(353).default},"/test.ts":{content:t(354).default,readOnly:!0}},Tn),5:Object(h.a)({"/index.ts":{content:t(355).default},"/test.ts":{content:t(356).default,readOnly:!0}},Tn),6:Object(h.a)({"/index.ts":{content:t(357).default},"/test.ts":{content:t(358).default,readOnly:!0}},Tn),7:Object(h.a)({"/index.ts":{content:t(359).default},"/test.ts":{content:t(360).default,readOnly:!0}},Tn),8:Object(h.a)({"/index.ts":{content:t(361).default},"/test.ts":{content:t(362).default,readOnly:!0}},Tn),9:Object(h.a)({"/index.ts":{content:t(363).default},"/test.ts":{content:t(364).default,readOnly:!0}},Tn),10:Object(h.a)({"/index.ts":{content:t(365).default},"/test.ts":{content:t(366).default,readOnly:!0}},Tn),11:Object(h.a)({"/index.ts":{content:t(367).default,readOnly:!0},"/test.ts":{content:t(368).default,readOnly:!0},"/declarations/str-utils/index.d.ts":{content:t(369).default},"/node_modules/str-utils/index.js":{content:t(370).default,readOnly:!0},"/node_modules/str-utils/package.json":{content:In(t(371)),readOnly:!0},"/node_modules/str-utils/README.md":{content:t(372).default,readOnly:!0}},Tn),12:Object(h.a)({"/index.ts":{content:t(373).default,readOnly:!0},"/test.ts":{content:t(374).default,readOnly:!0},"/declarations/stats/index.d.ts":{content:t(375).default},"/node_modules/stats/index.js":{content:t(376).default,readOnly:!0},"/node_modules/stats/package.json":{content:In(t(377)),readOnly:!0},"/node_modules/stats/README.md":{content:t(378).default,readOnly:!0}},Tn),13:Object(h.a)({"/index.ts":{content:t(379).default,readOnly:!0},"/test.ts":{content:t(380).default,readOnly:!0},"/module-augmentations/date-wizard/index.d.ts":{content:t(381).default},"/node_modules/date-wizard/index.js":{content:t(382).default,readOnly:!0},"/node_modules/date-wizard/index.d.ts":{content:t(383).default,readOnly:!0},"/node_modules/date-wizard/package.json":{content:In(t(384)),readOnly:!0}},Tn)},Un=function(n,e){var t=localStorage.getItem(n);return null===t?e:JSON.parse(t)},kn=function(n,e){localStorage.setItem(n,JSON.stringify(e))};function Pn(n,e){for(var t={},r=0,s=Object.keys(e);r<s.length;r++){var o=s[r];Object.prototype.hasOwnProperty.call(n,o)?t[o]={content:n[o],readOnly:e[o].readOnly}:t[o]=e[o]}return t}var jn={};var Mn={currentExerciseNumber:1,lastCompletedExerciseNumber:0},qn=function(){var n=new b.a(1),e=Un("exercisesProgress",Mn),t=function(){return kn("exercisesProgress",e)};return n.next(e),{completeExercise:function(){e=Object(h.a)(Object(h.a)({},e),{},{lastCompletedExerciseNumber:Math.max(e.lastCompletedExerciseNumber,e.currentExerciseNumber),currentExerciseNumber:Math.min(e.currentExerciseNumber+1,Object.keys(On).length)}),n.next(e),t()},goToExercise:function(r){e=Object(h.a)(Object(h.a)({},e),{},{currentExerciseNumber:Math.min(e.lastCompletedExerciseNumber+1,Object.keys(On).length,r)}),n.next(e),t()},observable$:n}}(),Sn=t(112),Rn=t(385);function $n(n){return Object.keys(n).reduce((function(e,t){return e[t]=n[t].content,e}),{})}function Cn(n,e){return Object.keys(e).reduce((function(t,r){return e[r]!==n[r]&&(t[r]=e[r]),t}),{})}function Fn(){var n=Object(i.a)(["\n    font-size: 18px;\n"]);return Fn=function(){return n},n}function Dn(){var n=Object(i.a)(["\n    margin: 20px 0 15px;\n"]);return Dn=function(){return n},n}function Wn(){var n=Object(i.a)(["\n    text-align: center;\n"]);return Wn=function(){return n},n}function Nn(){var n=Object(i.a)(["\n    min-width: 1px;\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n"]);return Nn=function(){return n},n}function zn(){var n=Object(i.a)(["\n    padding: 5px 10px;\n    overflow: auto;\n    height: 120px;\n    box-sizing: border-box;\n"]);return zn=function(){return n},n}function Ln(){var n=Object(i.a)(["\n    flex: 1 1 auto;\n    position: relative;\n    min-width: 1px;\n"]);return Ln=function(){return n},n}function Bn(){var n=Object(i.a)(["\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n"]);return Bn=function(){return n},n}var _n=Number(Object.keys(On).pop()),Kn=g.a.div(Bn()),Jn=g.a.div(Ln()),Vn=g.a.div(zn()),Qn=g.a.div(Nn()),Gn=g.a.div(Wn()),Hn=g.a.div(Dn()),Xn=g.a.button(Fn());function Yn(n,e){for(var t=On[n],r={},s=0,o=Object.entries(e);s<o.length;s++){var a=Object(c.a)(o[s],2),i=a[0];a[1].content!==t[i].content&&(r[i]=!0)}return r}function Zn(n){var e=n.exerciseNumber,t=Object(r.useMemo)((function(){return function(n){if(!jn[n]){var e="exercise.".concat(n),t=On[n],r=Un(e,{}),s=en()((function(){kn(e,r)}),500),o=new b.a(1);o.next(Pn(r,t)),jn[n]={observable$:o,update:function(n,e){r=Object(h.a)(Object(h.a)({},r),{},Object(y.a)({},n,e)),s(),o.next(Pn(r,t))},revert:function(n){delete(r=Object(h.a)({},r))[n],s(),o.next(Pn(r,t))}}}return jn[n]}(e)}),[e]),o=Object(r.useState)(void 0),a=Object(c.a)(o,2),i=a[0],l=a[1],u=Object(r.useMemo)((function(){return t.observable$.pipe((function(n){var e=Rn();return new Sn.a((function(t){var r=!1,s={},o=n.subscribe(function(){var n=Object(un.a)(cn.a.mark((function n(o){var a,i,l;return cn.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(a=$n(o),r){n.next=8;break}return r=!0,s=a,n.next=6,e.init(a);case 6:n.next=13;break;case 8:return i=s,l=a,s=a,n.next=13,e.updateFiles(Cn(i,l));case 13:return n.t0=t,n.next=16,e.getErrors();case 16:n.t1=n.sent,n.t0.next.call(n.t0,n.t1);case 18:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());t.add((function(){e.terminate(),o.unsubscribe()}))}))}))}),[t]),p=Object(r.useState)("/index.ts"),d=Object(c.a)(p,2),m=d[0],g=d[1],v=Object(r.useCallback)((function(n){n.file&&(g(n.file),l(n.start))}),[l,g]),w=Object(r.useCallback)((function(n,e){t.update(n,e)}),[t]);return f(t.observable$,(function(n){return s.a.createElement(Kn,null,s.a.createElement(j,{id:"files",header:"Files",orientation:"vertical"},s.a.createElement(Z,{selectedFilename:m,fileTree:On[e],onSelectFilename:g,modifiedFilenames:Yn(e,n),revertFile:t.revert})),s.a.createElement(Qn,null,s.a.createElement($,{filename:m,readOnly:Boolean(n[m].readOnly)}),s.a.createElement(Jn,null,s.a.createElement(bn,{namespace:String(e),selectedFilename:m,values:n,onChange:w,theme:"vs-light",position:i,onNavigate:function(){return null},options:{minimap:{enabled:!1}}})),f(u,(function(n){return s.a.createElement(j,{id:"exercise",header:n.length>0?"Errors (".concat(n.length,")"):"Completed",orientation:"horizontal"},s.a.createElement(Vn,null,n.length>0&&s.a.createElement(En,{errors:n,onClick:v}),0===n.length&&s.a.createElement(Gn,null,s.a.createElement(Hn,null,e===_n?s.a.createElement(s.a.Fragment,null,"Congratulations! You have completed the whole set of exercises."):s.a.createElement(s.a.Fragment,null,"Good job! Exercise ",e," is completed.")),e!==_n&&s.a.createElement(Xn,{onClick:qn.completeExercise},"Next exercise"))))}))))}))}function ne(){var n=Object(i.a)(["\n    flex: 0 0 auto;\n    border-top: 1px solid #294e80;\n    padding: 5px 0;\n    text-align: center;\n    color: gray;\n    font-size: 12px;\n    a,\n    a:hover,\n    a:visited,\n    a:active {\n        color: inherit;\n    }\n    z-index: 1;\n"]);return ne=function(){return n},n}var ee=g.a.footer(ne()),te=(new Date).getFullYear();function re(){return s.a.createElement(ee,null,"\xa9 ",te," ",s.a.createElement("a",{href:"https://github.com/mdevils"},"Marat Dulin"),","," ",s.a.createElement("a",{href:"https://github.com/mdevils/typescript-exercises"},"contribute"))}function se(){return s.a.createElement("svg",{fill:"none",height:"26",viewBox:"0 0 27 26",width:"27",xmlns:"http://www.w3.org/2000/svg"},s.a.createElement("path",{clipRule:"evenodd",d:"m.98608 0h24.32332c.5446 0 .9861.436522.9861.975v24.05c0 .5385-.4415.975-.9861.975h-24.32332c-.544597 0-.98608-.4365-.98608-.975v-24.05c0-.538478.441483-.975.98608-.975zm13.63142 13.8324v-2.1324h-9.35841v2.1324h3.34111v9.4946h2.6598v-9.4946zm1.0604 9.2439c.4289.2162.9362.3784 1.5218.4865.5857.1081 1.2029.1622 1.8518.1622.6324 0 1.2331-.0595 1.8023-.1784.5691-.1189 1.0681-.3149 1.497-.5879s.7685-.6297 1.0187-1.0703.3753-.9852.3753-1.6339c0-.4703-.0715-.8824-.2145-1.2365-.1429-.3541-.3491-.669-.6186-.9447-.2694-.2757-.5925-.523-.9692-.7419s-.8014-.4257-1.2743-.6203c-.3465-.1406-.6572-.2771-.9321-.4095-.275-.1324-.5087-.2676-.7011-.4054-.1925-.1379-.3409-.2838-.4454-.4379-.1045-.154-.1567-.3284-.1567-.523 0-.1784.0467-.3392.1402-.4824.0935-.1433.2254-.2663.3959-.369s.3794-.1824.6269-.2392c.2474-.0567.5224-.0851.8248-.0851.22 0 .4523.0162.697.0486.2447.0325.4908.0825.7382.15.2475.0676.4881.1527.7218.2555.2337.1027.4495.2216.6475.3567v-2.4244c-.4015-.1514-.84-.2636-1.3157-.3365-.4756-.073-1.0214-.1095-1.6373-.1095-.6268 0-1.2207.0662-1.7816.1987-.5609.1324-1.0544.3392-1.4806.6203s-.763.6392-1.0104 1.0743c-.2475.4352-.3712.9555-.3712 1.5609 0 .7731.2268 1.4326.6805 1.9785.4537.546 1.1424 1.0082 2.0662 1.3866.363.146.7011.2892 1.0146.4298.3134.1405.5842.2865.8124.4378.2282.1514.4083.3162.5403.4946s.198.3811.198.6082c0 .1676-.0413.323-.1238.4662-.0825.1433-.2076.2676-.3753.373s-.3766.1879-.6268.2473c-.2502.0595-.5431.0892-.8785.0892-.5719 0-1.1383-.0986-1.6992-.2959-.5608-.1973-1.0805-.4933-1.5589-.8879z",fill:"#fff",fillRule:"evenodd"}))}function oe(){var n=Object(i.a)(["\n    font-size: 24px;\n    margin-left: 20px;\n    color: yellow;\n    opacity: 0.9;\n"]);return oe=function(){return n},n}function ae(){var n=Object(i.a)(["\n    margin: 0;\n    padding: 0;\n    font-weight: 300;\n    color: white;\n    font-family: Helvetica, Arial, serif;\n    letter-spacing: -1px;\n    font-size: 30px;\n    strong {\n        font-weight: 500;\n    }\n    svg {\n        margin-right: 10px;\n        position: relative;\n        top: 3px;\n    }\n"]);return ae=function(){return n},n}function ie(){var n=Object(i.a)(["\n    flex: 0 0 auto;\n    background: #294e80;\n    padding: 10px 16px;\n    z-index: 1;\n"]);return ie=function(){return n},n}var le=g.a.header(ie()),ce=g.a.h1(ae()),ue=g.a.span(oe());function pe(){return s.a.createElement(le,null,s.a.createElement(ce,null,s.a.createElement(se,null),"TypeScript",s.a.createElement(ue,null,"exercises")))}function de(){var n=Object(i.a)(["\n    display: inline-block;\n    margin: 0;\n    padding: 0;\n    position: relative;\n    line-height: 30px;\n    color: ",";\n    // pointer-events: ",";\n    cursor: ",";\n    font-weight: ",";\n    &::after {\n        content: '\xb7';\n        margin: 0 5px;\n        opacity: 0.25;\n    }\n    &:last-of-type::after {\n        display: none;\n    }\n"]);return de=function(){return n},n}function me(){var n=Object(i.a)(["\n    display: inline-block;\n    font-weight: bold;\n    margin-right: 20px;\n    opacity: 0.75;\n"]);return me=function(){return n},n}function fe(){var n=Object(i.a)(["\n    flex: 1 1 auto;\n    list-style-type: none;\n"]);return fe=function(){return n},n}function ge(){var n=Object(i.a)(["\n    flex: 0 0 auto;\n    display: flex;\n    flex-direction: row;\n    background: #faf9f8;\n    border-bottom: 1px solid #294e80;\n    align-items: center;\n    padding: 0 10px;\n    user-select: none;\n"]);return ge=function(){return n},n}var ye=g.a.div(ge()),he=g.a.nav(fe()),be=g.a.li(me()),ve=g.a.li(de(),(function(n){return n.selectable?"inherit":"gray"}),(function(n){var e=n.selectable,t=n.current;return e&&!t?"all":"none"}),(function(n){var e=n.selectable,t=n.current;return e&&!t?"pointer":"inherit"}),(function(n){return n.current?"bold":"normal"}));function we(){return s.a.createElement(ye,null,s.a.createElement(he,null,f(qn.observable$,(function(n){var e=n.currentExerciseNumber,t=n.lastCompletedExerciseNumber;return s.a.createElement(s.a.Fragment,null,s.a.createElement(be,null,"Exercises"),Object.keys(On).map((function(n){return s.a.createElement(ve,{selectable:Number(n)<=t+1,current:Number(n)===e,onClick:function(){return qn.goToExercise(Number(n))},key:n},n)})))}))))}function xe(){var n=Object(i.a)(["\n    flex: 1 1 auto;\n    position: relative;\n"]);return xe=function(){return n},n}function Ae(){var n=Object(i.a)(["\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n"]);return Ae=function(){return n},n}var Ee=g.a.div(Ae()),Te=g.a.main(xe());function Ie(n){var e=n.children;return s.a.createElement(Ee,null,s.a.createElement(pe,null),s.a.createElement(we,null),s.a.createElement(Te,null,e),s.a.createElement(re,null))}function Oe(){var n=Object(i.a)(["\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Light'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/light/latest.ttf) format('truetype');\n        font-weight: 100;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Semilight'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semilight/latest.ttf) format('truetype');\n        font-weight: 200;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/normal/latest.ttf) format('truetype');\n        font-weight: 400;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Bold'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/bold/latest.ttf) format('truetype');\n        font-weight: 600;\n    }\n\n    @font-face {\n        font-family: SegoeUI;\n        src: local('Segoe UI Semibold'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff2) format('woff2'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.woff) format('woff'),\n            url(//c.s-microsoft.com/static/fonts/segoe-ui/west-european/semibold/latest.ttf) format('truetype');\n        font-weight: 700;\n    }\n"]);return Oe=function(){return n},n}var Ue=Object(l.css)(Oe());function ke(){var n=Object(i.a)(["\n    html,\n    body,\n    #root {\n        margin: 0;\n        height: 100%;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-family: 'Segoe UI Web (West European)', Segoe UI, -apple-system, BlinkMacSystemFont, Roboto, Helvetica Neue,\n            sans-serif;\n        font-size: 16px;\n    }\n    ","\n"]);return ke=function(){return n},n}var Pe=Object(l.css)(ke(),Ue);function je(){return s.a.createElement(s.a.Fragment,null,s.a.createElement(l.Global,{styles:Pe}),s.a.createElement(Ie,null,f(qn.observable$,(function(n){var e=n.currentExerciseNumber;return s.a.createElement(Zn,{key:e,exerciseNumber:e})}))))}Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(s.a.createElement(s.a.StrictMode,null,s.a.createElement(je,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()})).catch((function(n){console.error(n.message)}))}},[[262,2,3]]]);
//# sourceMappingURL=main.31644455.chunk.js.map